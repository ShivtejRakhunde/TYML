import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset from a CSV file
data = pd.read_csv('data.csv')  # Replace 'data.csv' with your file path

# Separate features
X = data.iloc[:, :-1].values  # All rows, all columns except the last

# K-Means Clustering function
def kmeans(X, k, max_iters=100):
    # Randomly initialize the centroids
    np.random.seed(0)  # For reproducibility
    centroids = X[np.random.choice(X.shape[0], k, replace=False)]
    
    for _ in range(max_iters):
        # Calculate distances from points to centroids
        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)
        
        # Assign clusters based on nearest centroid
        labels = np.argmin(distances, axis=1)
        
        # Calculate new centroids as the mean of assigned points
        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])
        
        # If centroids do not change, break
        if np.all(centroids == new_centroids):
            break
        
        centroids = new_centroids
    
    return centroids, labels

# Parameters
k = 3  # Number of clusters
centroids, labels = kmeans(X, k)

# Plotting
plt.figure(figsize=(10, 6))

# Scatter plot of clustered data
for i in range(k):
    plt.scatter(X[labels == i][:, 0], X[labels == i][:, 1], label=f'Cluster {i}', s=100)

# Plot centroids
plt.scatter(centroids[:, 0], centroids[:, 1], color='black', marker='X', s=200, label='Centroids')

plt.title('K-Means Clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.grid()
plt.show()
